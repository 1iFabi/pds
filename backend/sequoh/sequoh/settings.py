"""
Django settings for sequoh project.

Generated by 'django-admin startproject' using Django 5.2.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
import os

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get('SECRET_KEY', 'django-insecure-isazy3kl)20lf!i%30g4xj1$s8mjz+an9pq6smoa=$!1-eqzty')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.environ.get('ENVIRONMENT', 'development') != 'production'

# Hosts permitidos (sin cadenas vacías)
ALLOWED_HOSTS = [h for h in [
    os.getenv("RENDER_EXTERNAL_HOSTNAME", ""),
    os.getenv("APP_DOMAIN", ""),
    "localhost",
    "127.0.0.1",
] if h]

# Obtener el hostname de Render dinámicamente
RENDER_EXTERNAL_HOSTNAME = os.getenv("RENDER_EXTERNAL_HOSTNAME")

# ORÍGENES DE CONFIANZA CSRF (única definición)
CSRF_TRUSTED_ORIGINS = [
    "https://pds-kappa.vercel.app",
    "http://localhost:5173",
    "http://127.0.0.1:5173",
    "https://pds-7idd.onrender.com",
]
if RENDER_EXTERNAL_HOSTNAME:
    CSRF_TRUSTED_ORIGINS += [
        f"https://{RENDER_EXTERNAL_HOSTNAME}",
        f"http://{RENDER_EXTERNAL_HOSTNAME}",
    ]

# CORS (única definición)
CORS_ALLOWED_ORIGINS = [
    "https://pds-kappa.vercel.app",
    "http://localhost:5173",
    "http://127.0.0.1:5173",
    "http://localhost:3000",
    "http://127.0.0.1:3000",
    "https://pds-7idd.onrender.com",
]
if RENDER_EXTERNAL_HOSTNAME:
    CORS_ALLOWED_ORIGINS += [
        f"https://{RENDER_EXTERNAL_HOSTNAME}",
        f"http://{RENDER_EXTERNAL_HOSTNAME}",
    ]


# Application definition

INSTALLED_APPS = [
    'autenticacion',
    'rest_framework',
    'corsheaders',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sites',
    'allauth',
    'allauth.account',
]

SITE_ID = 1

AUTHENTICATION_BACKENDS = (
    'django.contrib.auth.backends.ModelBackend',
    'allauth.account.auth_backends.AuthenticationBackend',
)

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'allauth.account.middleware.AccountMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'sequoh.security.NoCacheMiddleware',
]

ROOT_URLCONF = 'sequoh.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates',],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'sequoh.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

# Database - PostgreSQL en producción (Render), SQLite en local
import dj_database_url

if os.environ.get('DATABASE_URL'):
    # Producción: PostgreSQL desde Render
    DATABASES = {
        'default': dj_database_url.config(
            default=os.environ.get('DATABASE_URL'),
            conn_max_age=600,
            conn_health_checks=True,
        )
    }
else:
    # Desarrollo: SQLite
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': BASE_DIR / 'db.sqlite3',
        }
    }


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = BASE_DIR / 'staticfiles'
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

# Seguridad tras proxy (Render/Reverse Proxy)
SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')
CSRF_COOKIE_SECURE = not DEBUG
SESSION_COOKIE_SECURE = not DEBUG

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Seguridad de sesión y cookies
SESSION_EXPIRE_AT_BROWSER_CLOSE = True
# (Opcional) Forzar expiración más corta si lo deseas: SESSION_COOKIE_AGE = 60 * 60  # 1 hora


# EMAIL CONFIGURATION - Usar API de Gmail mediante adapter de allauth
DEFAULT_FROM_EMAIL = os.environ.get('DEFAULT_FROM_EMAIL', 'GenomIA <proyectogenomia@gmail.com>')
SERVER_EMAIL = os.environ.get('SERVER_EMAIL', 'proyectogenomia@gmail.com')
EMAIL_SUBJECT_PREFIX = '[GenomIA] '

# Rutas para credenciales/token de Gmail API (puedes ajustarlas por env)
GMAIL_CREDENTIALS_FILE = os.environ.get('GMAIL_CREDENTIALS_FILE', str((BASE_DIR / 'config' / 'credentials.json').resolve()))
GMAIL_TOKEN_FILE = os.environ.get('GMAIL_TOKEN_FILE', str((BASE_DIR / 'config' / 'token.json').resolve()))

# Adapter que envía con Gmail API (usa autenticacion/adapters.py)
ACCOUNT_ADAPTER = 'autenticacion.adapters.GmailAPIAccountAdapter'

# Verificación obligatoria y URLs de redirección tras confirmar
REQUIRE_EMAIL_VERIFICATION = True
EMAIL_VERIFICATION_EXPIRE_HOURS = 24

# Dominio del FRONTEND: detecta automáticamente el entorno
# En Render, usa DATABASE_URL como indicador de producción
is_production = os.environ.get('DATABASE_URL') is not None or os.environ.get('RENDER') is not None

FRONTEND_DOMAIN = os.environ.get(
    'FRONTEND_DOMAIN',
    'https://pds-kappa.vercel.app' if is_production else 'http://localhost:5173'
)
# URL absoluta de redirección al login del FRONTEND
FRONTEND_LOGIN_REDIRECT = os.environ.get(
    'FRONTEND_LOGIN_URL', f"{FRONTEND_DOMAIN.rstrip('/')}/login?verified=1"
)
ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_UNIQUE_EMAIL = True
ACCOUNT_EMAIL_VERIFICATION = 'mandatory'
# Redirecciones absolutas hacia el frontend, tras confirmar el email
ACCOUNT_EMAIL_CONFIRMATION_ANONYMOUS_REDIRECT_URL = FRONTEND_LOGIN_REDIRECT
ACCOUNT_EMAIL_CONFIRMATION_AUTHENTICATED_REDIRECT_URL = FRONTEND_LOGIN_REDIRECT
ACCOUNT_LOGIN_ON_EMAIL_CONFIRMATION = False
# Confirmar email con GET (evita la página intermedia "Confirm Email Address")
ACCOUNT_CONFIRM_EMAIL_ON_GET = True
ACCOUNT_AUTHENTICATION_METHOD = 'email'


# CORS configuration for development and production
# Permitir todos los orígenes solo en desarrollo
CORS_ALLOW_ALL_ORIGINS = DEBUG
# Habilitar envío de cookies/sesiones desde el frontend (React)
CORS_ALLOW_CREDENTIALS = True

# CORS headers
CORS_ALLOW_HEADERS = [
    'accept',
    'accept-encoding',
    'authorization',
    'content-type',
    'dnt',
    'origin',
    'user-agent',
    'x-csrftoken',
    'x-requested-with',
]

# Cookies de sesión/CSRF. En producción con dominios distintos (Vercel/Render)
# puede requerirse SameSite=None + Secure=True para que el navegador acepte cookies cross-site.
SESSION_COOKIE_SAMESITE = 'Lax'
CSRF_COOKIE_SAMESITE = 'Lax'

LOGIN_URL = '/login'
LOGIN_REDIRECT_URL = '/dashboard'
LOGOUT_REDIRECT_URL = '/login'
